# F18_db

- name: Docker startup enable
  shell: "systemctl enable docker"
  tags:
    - init

- name: Docker start
  shell: "systemctl start docker"
  tags:
    - init

- name: Disable SELinux
  selinux:
    state: disabled

- name: get container status {{ container }}
  shell: docker ps -a -f name={{ container }} --format {%raw%}"table {{.Status}}"{%endraw%} | awk 'FNR == 2 {print}' | awk '{print $1}' | grep -c Up
  ignore_errors: yes
  register: docker_ps

- name: "Ensure /srv/docker/{{ container }} directory exists"
  file:
    path: /srv/docker/{{ container }}
    state: directory
    owner: root
    group: docker
    mode: 0775
  tags:
    - init


- name: "Ensure /srv/docker/{{ container }}/docker-entrypoint-initdb.d directory exists"
  file:
    path: /srv/docker/{{ container }}/docker-entrypoint-initdb.d
    state: directory
    owner: root
    group: docker
    mode: 0775
  tags:
    - init


- name: "Ensure /backup/{{ container }} exists"
  file:
    path: "/backup/{{ container }}"
    state: directory
    owner: root
    group: root
    mode: 0770
  tags:
    - init

- name: F18_db shell script start
  template:
    src: postgres_start.sh
    dest: "/srv/docker/{{ container }}/postgres_start.sh"
    mode: 0775

- name: F18_db shell script backup
  template:
    src: postgres_backup.sh
    dest: "/srv/docker/{{ container }}/postgres_backup.sh"
    mode: 0775
    
- name: Install common software requirements
  ignore_errors: yes
  become: true
  yum:
    name:
     - postgresql-server
     - postgresql10-server      
    state: absent

- name: "copy init_users.sh"
  template:
    src: init_users.sh
    dest: "/srv/docker/{{ container }}/docker-entrypoint-initdb.d/init_users.sh"
    mode: 0770

- name: "copy postgresql.conf"
  template:
    src: postgresql.conf
    dest: "/srv/docker/{{ container }}/postgresql.conf"
    mode: 0770
    # postgres
    owner: 101
    # postgres
    group: 103

- name: postgres start
  shell: "/srv/docker/{{ container }}/postgres_start.sh start"
  when: restart_always or docker_ps.stdout_lines[0] == '0'

- name: sacekaj malo
  pause:
    seconds: 30
  when: restart_always or docker_ps.stdout_lines[0] == '0'

#- name: "PGSQL {{ container }} crontab backup"
#  cron:
#    name: "{{ container }} PGSQL backup"
#    minute: 0
#    hour: 23
#    user: root
#    job: "/srv/docker/{{ container }}/postgres_backup.sh"

- name: "run /srv/docker/{{ container }}/docker-entrypoint-initdb.d/init_users.sh"
  shell: "(docker exec {{ container }} psql -U postgres -c '\\du' | grep xtrole) || (docker exec {{ container }} /docker-entrypoint-initdb.d/init_users.sh)"
  tags:
    - init

- name: "create_tables_1.sh"
  template:
    src: "{{ item }}.sh"
    dest: "/srv/docker/{{ container }}/docker-entrypoint-initdb.d/{{ item }}.sh"
    mode: 0770
  when: "inventory_hostname == 'centos1'"
  with_items:
   - create_tables_1
   - create_pub_sub_1

- name: "create_tables_2.sh"
  template:
    src: "{{ item }}.sh"
    dest: "/srv/docker/{{ container }}/docker-entrypoint-initdb.d/{{ item }}.sh"
    mode: 0770
  when: "inventory_hostname == 'centos2'"
  with_items:
   - create_tables_2
   - create_pub_sub_2

- name: "run /srv/docker/{{ container }}/docker-entrypoint-initdb.d/create_tables_1.sh"
  shell: "docker exec {{ container }} /docker-entrypoint-initdb.d/create_tables_1.sh"
  when: "inventory_hostname == 'centos1'"

- name: "run /srv/docker/{{ container }}/docker-entrypoint-initdb.d/create_tables_2.sh"
  shell: "docker exec {{ container }} /docker-entrypoint-initdb.d/create_tables_2.sh"
  when: "inventory_hostname == 'centos2'"

- name: "run /srv/docker/{{ container }}/docker-entrypoint-initdb.d/create_pub_sub_1.sh"
  shell: "docker exec {{ container }} /docker-entrypoint-initdb.d/create_pub_sub_1.sh"
  when: "inventory_hostname == 'centos1'"

- name: "run /srv/docker/{{ container }}/docker-entrypoint-initdb.d/create_pub_sub_2.sh"
  shell: "docker exec {{ container }} /docker-entrypoint-initdb.d/create_pub_sub_2.sh"
  when: "inventory_hostname == 'centos2'"